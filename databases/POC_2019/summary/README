Andrew Tarzia

Python code required can be found at https://github.com/andrewtarzia/cage_collect --> $CODE


== Authors used for search in ../final_db/author_list_final.txt ==
== Only used last names in search --> many more candidates... == 
== Avoids ambiguity with initials. == 

== Method == 
1) searched the CSD using the CSD API and the script $CODE/CSD_API/get_from_author.py:
    - search by author last name
    - exclude:
        - if 'catena' in entry.chemical_name or entry.chemical_name is None
        - if entry.is_polymeric is True
        - if entry.is_powder_study is True
        - if entry.is_organometallic is True (ORGANIC CAGES ONLY) (NOTE THAT THE CSD IS NOT PERFECT AT GETTING THIS VALUE RIGHT - Mg is not considered metallic?)
    - Note: this process entriely depends on the data available in the CSD you are searching.
        - i.e. HIWHOM and VOFROZ do not have 3d_structures in the CSD on my local machine and therefore get skipped.
    --> 71183 cifs found from 49 authors
    --> REFCODEs in ../final_db/DB_final.gcd

2) Using $CODE/CSD_API/REFCODEs_to_PDBs.py and CSD API.
    - get PDBs in DB DIR from REFCODEs in ../final_db/DB_final.gcd
    - save REFCODEs of entries with entry.has_3d_structure is False to ../final_db/misssing_struct_final.gcd
        - check for possible cross references to old REFCODEs
        - save cross references to ../final_db/cross_refs_final.csv
    --> structures missing: 1823 of 71183
    --> cross refs used: 1968 of 71183

3) Sort structures based on the presence of a porous molecule in the CIF
    - too many structures to visualize manually
    - run $CODE/sort_structures.py
        - checks if a CIF contains at least one molecule (by pywindow modularization) with
        a pore_diameter_opt > some tolerance (set to 0.0 angstrom)
        - deletes all CIFs collected in step 2 that fail this test        
        - outputs the results to ../final_db/sorting.csv:
            - cif with Y if deleted, N if not deleted (i.e. has porous molecule), M if
            deleted because CIF was missing OR if ASE failed to load CIF.
        - if a structure fails with a Memory error, it suggests the structure is very
        disordered, and they are moved to ./memory/
        - if 'Unknown' in .cif --> remove structure as it will fail.
    - THIS METHODOLOGY WILL REMOVE STRUCTURES THAT ARE CAGE-LIKE BUT NONPOROUS
    -structues deleted: 61427 of 71183 ('Y')
    -structues with 'M': 1941 of 71183

4) Check structures in ../final_db/memory_final/ for simple fixes
    - these structures are likely broken due to disorder
    - structures tested:
		* IYEMAC_extracted.cif — is cage — keep
		* NEDBUW_extracted.cif — is cage — do not keep because is_organometallic fails    
        * NEXLAD_extracted.cif - nonporous -  do not keep
		* PAWSEO_extracted.cif — is porous — keep (has Rb — suggesting it shouldn't have passed to this step?)
		* QEFMUM_extracted.cif — is porous — keep
		* TEKZER_extracted.cif — not porous — do not keep
		* WOSMUO02_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO03_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO04_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO05_extracted.cif — periodic/nonporous — do not keep
		* ZODXEX_extracted.cif — nonporous — do not keep
    - by:
        - delete all atoms in CIF with '?'
            - note that if PDBs are used throughout, then this will need to be done manually in a structure modification software.
        - if this fails, then we do not keep that structure because any other changes require manual chemical modifications:
            - failed for PAWSEO_extracted.cif and QEFMUM_extracted.cif
        - copy .cif, .pdb and _rebuild.pdb from ../final_db/memory_final/ to ../final_db/

5) Write ../final_db/post_pw_final.gcd using $CODE/utils/PDBs_to_GCD.py
    - assumes that any remaining PDBs must be accepted
    - have 7816 PDBs at this stage

6) Initial screen is done. Now run $CODE/classify_structures.py to find cages, and output the porous molecules of those cages
    - check PDB for molecules that are cages by this definition:
        - pore_diameter_opt > 0.0 angstrom
        - no_windows >= 2  # masterlerz definition
    - output:
        - ../final_db/classified_final.csv:
            - refcode, molecule id, pore_diameter_opt, no_windows
        - save cage molecules of each PDB to PDBs

7) delete CIFs/PDBs in working directory that are not in ../final_db/classified.csv
    - any items in ../final_db/classified.csv with zeros in all columns (other than REFCODE) had their CIFs and PDBs removed.
    - 5022 _extracted.pdb remaining
    - INAGUA and JAQBOT had memory issues, and were skipped.
    - ACDMNP behaved strangely with duplication of atoms in pywindow - noted in ./DB_sheet.ods

8) Visualize the most porous molecule of each structure and manually filter for cage structures using ASE.
    - performed with script: $CODE/utils/viz_structures_ase.py (this could be made much more efficient in the future.)
    - this search is dependant on the usage of the DB. In this case, I have kept only cage-like structures.
        - which means I have removed '1D'-macrocylic structures (i.e. ACAVAE)
        - also removed spiral like structures
    - any structures that showed buggy behaviour in ASE (i.e. the window COMs had large values) were removed.
        - removed AKIFAB due to pore handling of connected rings in pywindow
    - kept CAHTEM, CAHTEMXX, CAHVAK, CAHVAKXX
        - pywindow did not handle guests well, which lead to a bug.
    - Ignored structures with multiple independant cavities in one discrete molecule
    - save REFCODEs to be kept --> ../final_db/viz_select_final.gcd
    - save REFCODEs that have been checked (kept or not) --> ../final_db/temp_done_final.gcd
    - on Aug 7/9 2020:
        - This process was honed into to only cage-like molecules, i.e. cyclodextrins/cucurbitriuls were removed.
        - Updated ../final_db/viz_select_final.gcd
            - This file contains some REFCODEs that did not pass step 7 because all volumns in classified.csv were 0.

9) Copy structures deemed to be cages into ../final_db/cage_subset/
    - for all REFCODEs in ./viz_select.gcd:
        - cp REFCODE* ../final_db/cage_subset/
        - This is a dataset of cages!
        - 1033 structures
    - on Aug 7/9 2020:
        - Updated based on new ../final_db/viz_select_final.gcd
        - Only copied REFCODEs to ../final_db/cage_subset/ that are not already there
        - Deleted items with REFCODE not in new ../final_db/viz_select_final.gcd
        - Now 396 structures

10) Remove solvent using $CODE/remove_solvent.py
    - defines a solvent molecule as pore_diam_opt < 0 or no_windows < 2

11) Fill in ./DB_sheet.ods
    Info to gather:
        - whether there is disorder in the cage (specifically not the solvent)
            - done visually
        - whether squeeze or mask has been used
            - written (with other info) to ../final_db/cage_subset/solvent_prop.csv using $CODE/CSD_API/get_solvent_info.py and CSD Python API
        - whether there is solvent present
            - done using $CODE/utils/solv_pres.py (checks if _rebuild.pdb has more atoms than _nosolv.pdb)
            - output to ../final_db/cage_subset/solvent_pres.txt and added to ./DB_sheet.ods
        - classify into a structure type
            - done visually
    In this process:
        - deleted undesired structure types (sheet: deleted)
        - fixed bugs with structures that required manual solvent removal (noted in full_DB sheet):
            - move each lot of files for the following REFCODEs to ../final_db/cage_subset/originals/
            - apply the following edits:
                - CAHTEM
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHTEM01
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHTEM02
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHTEM03
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHTEM04
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHVAK
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHVAK01
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHVAK02
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHVAK03
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - CAHVAK04
                    - deleted all iodine atoms using ASE
                    - [it looks like this was not actually done in the latest version on github, so the iodine atoms remain in the no_solv structures]
                - MOTWAV
                    - result of small cage not having windows by pywindow
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP02
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP03
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP04
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP05
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTYUR
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTZEC
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - TOBGIC
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - TOBGUO
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - VOTJOF
                    - pywindow analysis fails on one of the molecules
                    - delete this structure because it will fail in pore topology analysis
                - IBIGAD
                    - solvent removal fails to recognize multiple molecules
                - WIQHOW
                    - multiple cages come up with negative pore diameters, pywindow does not give an error, but it behaves strangely.
                    - delete this structure because it will fail in pore topology analysis
    - on Aug 7/9 2020:
        - Added new structures and moved all deleted structures to 'deleted'

12) Ran $CODE/pore_topologies/append_all_COMs.py on all _nosolv.pdb files in ../final_db/cage_subset/
    command: ''python $CODE/pore_topologies/append_all_COM.py '*_nosolv.pdb' NONE''

13) Ran $CODE/pore_topologies/collate_window_sizes.py on all _nosolv_*.json to collate the window sizes of all cages of all CIFs.
    command: ''python $CODE/pore_topologies/collate_window_sizes.py '*_nosolv*json' window_sizes.csv pore_sizes.csv'

14) List of REFCODEs where the solvent was not removed and had to be removed manually:
> RIPKOR
> VOMPIY
> RELZIU
> YAVQIV
> YAVQOB
> CAHTEM
> CAHTEM01
> CAHTEM02
> CAHTEM03
> CAHTEM04
> CAHVAK
> CAHVAK01
> CAHVAK02
> CAHVAK03
> CAHVAK04



==========================================================================




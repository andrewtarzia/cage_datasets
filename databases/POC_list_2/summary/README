Andrew Tarzia

== Authors used for search ==
== Only used last names in search --> many more candidates... == 
== Avoids ambiguity with initials. == 
- r.banerjee
- F.Beuerle
- C.J.Chang
- A.I.cooper
- d.j.Cram
- c.j.doonan
- a.p.Davis
- f.Diederich
- J.Gawronski
- B.Gole
- K.E.jelfs
- w.Kiggen
- K.Kim
- M.Kitta
- J.M.lehn
- m.mastalerz
- p.s.mukherjee
- j.Nelson
- Y.Pan
- H.Pang
- c.j.Pedersen
- R.Qiao
- m.l.c.Quan
- j.p.Sauvage
- C.A.Schalley
- K.Severin
- P.Skowronek
- a.g.slater
- f.Vogtle
- C.Wang
- M.D.Ward
- R.Warmuth
- D.Yuan
- L.Yuan
- M.Zeller
- W.Zhang
***

== Method == 
1) searched the CSD using the CSD API and the script get_from_author.py:
    - search by author last name
    - exclude:
        - if 'catena' in entry.chemical_name or entry.chemical_name is None
        - if entry.is_polymeric is True
        - if entry.is_powder_study is True
        - if entry.is_organometallic is True (ORGANIC CAGES ONLY) (NOTE THAT THE CSD IS NOT PERFECT AT GETTING THIS VALUE RIGHT - Mg is not considered metallic?)
    --> 67721 cifs found from 35 authors 
    --> REFCODEs in DB.gcd

2) Using 'REFCODEs_to_CIFs.py' and CSD API. [IN FUTURE, REPLACE WITH: REFCODEs_to_PDBs.py]
    - get CIFs in DB DIR from REFCODEs in DB.gcd
    - save REFCODEs of entries with entry.has_3d_structure is False to misssing_struct.gcd
        - check for possible cross references to old REFCODEs
        - save cross references to cross_refs.csv
    --> structures missing: 1677 of 67721
    --> cross refs used: 1889 of 67721

3) Sort structures based on the presence of a porous molecule in the CIF
    - too many structures to visualize manually
    - run sort_structures.py
        - checks if a CIF contains at least one molecule (by pywindow modularization) with
        a pore_diameter_opt > some tolerance (set to 0.25 angstrom)
        - deletes all CIFs collected in step 2 that fail this test        
        - outputs the results to sorting.csv:
            - cif with Y if deleted, N if not deleted (i.e. has porous molecule), M if
            deleted because CIF was missing OR if ASE failed to load CIF.
        - if a structure fails with a Memory error, it suggests the structure is very
        disordered, and they are moved to ./memory/
        - if 'Unknown' in .cif --> remove structure as it will fail.
    - THIS METHODOLOGY WILL REMOVE STRUCTURES THAT ARE CAGE-LIKE BUT NONPOROUS

4) Check structures in ./memory/ for simple fixes
    - these structures are likely broken due to disorder
    - structures tested:
		* IYEMAC_extracted.cif — is cage — keep
		* NEDBUW_extracted.cif — is cage — do not keep because is_organometallic fails
		* PAWSEO_extracted.cif — is porous — keep (has Rb — suggesting it shouldn't have passed to this step?)
		* QEFMUM_extracted.cif — is porous — keep
		* TEKZER_extracted.cif — not porous — do not keep
		* WOSMUO02_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO03_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO04_extracted.cif — periodic/nonporous — do not keep
		* WOSMUO05_extracted.cif — periodic/nonporous — do not keep
		* ZODXEX_extracted.cif — nonporous — do not keep
    - by:
        - delete all atoms in CIF with '?'
        - if this fails, then we do not keep that structure because any other changes require manual chemical modifications:
            - failed for PAWSEO_extracted.cif and QEFMUM_extracted.cif
        - copy .cif, .pdb and _rebuild.pdb from /memory/ to ../

5) Write post_pw.gcd using CIFs_to_GCD.py
    - assumes that any remaining CIFs must be accepted
    - have 5907 CIFs at this stage

6) Run REFCODEs_to_PDBs.py on post_pw.gcd to get _extracted.pdb of all REFCODEs
    - get PDBs from post_pw.gcd

7) Initial screen is done. Now run classify_structures.py to find cages, and output the porous molecules of those cages
    - check PDB for molecules that are cages by this definition:
        - pore_diameter_opt > 0.0 angstrom
        - no_windows >= 2  # masterlerz definition
    - output:
        - classified.csv:
            - refcode, molecule id, pore_diameter_opt, no_windows
        - save cage molecules of each PDB to PDBs

8) delete CIFs/PDBs in DIR that are not in classified.csv
    - any items in classified.csv with zeros in all columns (other than REFCODE) had their CIFs and PDBs removed.
    - 3813 _extracted.pdb remaining
    - INAGUA and JAQBOT had memory issues, and were skipped.

9) Visualize the most porous molecule of each structure and manually filter for cage structures using ASE.
    - performed with script: viz_structures_ase.py (this could be made much more efficient in the future.)
    - this search is dependant on the usage of the DB. In this case, I have kept only cage-like structures.
        - which means I have removed '1D'-macrocylic structures (i.e. ACAVAE)
        - also removed spiral like structures
    - any structures that showed buggy behaviour in ASE (i.e. the window COMs had large values) were removed.
        - removed AKIFAB due to pore handling of connected rings in pywindow
    - kept CAHTEM, CAHTEMXX, CAHVAK, CAHVAKXX
        - pywindow did not handle guests well, which lead to a bug.
    - save REFCODEs in to_keep --> viz_select.gcd

10) Copy structures deemed to be cages into ./cage_subset/
    - for all REFCODEs in viz_select.gcd:
        - cp REFCODE* ./cage_subset/

11) Remove solvent using remove_solvent.py
    - defines a solvent molecule as pore_diam_opt < 0 or no_windows < 2

12) Fill in DB_sheet.ods
    Info to gather:
        - whether there is disorder in the cage (specifically not the solvent)
            - done visually
        - whether there is solvent present
            - done using solv_pres.py (checks if _rebuild.pdb has more atoms than _nosolv.pdb)
            - output to solvent_pres.txt and added to DB_sheet.ods
        - whether squeeze or mask has been used
            - written (with other info) to solvent_prop.csv using get_solvent_info.py and CSD Python API
        - classify into a structure type
            - done visually
    In this process:
        - deleted undesired structure types (sheet: deleted)
        - fixed bugs with structures that required manual solvent removal (noted in full_DB sheet):
            - move each lot of files for the following REFCODEs to /cage_subset/originals/
            - apply the following edits:
                - CAHTEM
                    - deleted all iodine atoms using ASE
                - CAHTEM01
                    - deleted all iodine atoms using ASE
                - CAHTEM02
                    - deleted all iodine atoms using ASE
                - CAHTEM03
                    - deleted all iodine atoms using ASE
                - CAHTEM04
                    - deleted all iodine atoms using ASE
                - CAHVAK
                    - deleted all iodine atoms using ASE
                - CAHVAK01
                    - deleted all iodine atoms using ASE
                - CAHVAK02
                    - deleted all iodine atoms using ASE
                - CAHVAK03
                    - deleted all iodine atoms using ASE
                - CAHVAK04
                    - deleted all iodine atoms using ASE
                - MOTWAV
                    - result of small cage not having windows by pywindow
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP02
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP03
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP04
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTWUP05
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTYUR
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - MOTZEC
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - TOBGIC
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - TOBGUO
                    - result of small cage not having windows by pywindow due to disorder
                    - delete this structure as it may give rise to an odd pore topology
                - VOTJOF
                    - pywindow analysis fails on one of the molecules
                    - delete this structure because it will fail in pore topology analysis
                - WIQHOW
                    - multiple cages come up with negative pore diameters, pywindow does not give an error, but it behaves strangely.
                    - delete this structure because it will fail in pore topology analysis
    - end this step with 891 structures




---------------------

6) load post_pw.gcd into conquest
    - visually select cages from the Conquest search results
        - also kept bowl/catenane/ring like porous molecules.
        - ignored rotaxanes like AROBUG
        - check cross_refs
        - general guiding principle - does the structure have a 'binding pocket'?
    - save remaining REFCODEs to visual_selected.gcd
        - 2473 REFCODEs in .gcd file

7) delete CIFs/PDBs in DIR that are not in visual_selected.gcd

8) run extract_most_porous.py to save the pywindow results and structure file of the most porous molecule in each rebuilt pdb (of each CIF in visual_selected.gcd)
    - save results to visual_selected.csv

9) run classify_structures.py
    - read in results in visual_selected.csv
    - at this stage, I have done this automatically by using this definition of a cage:
        - number of windows in the most porous molecule 
    - classifications:
        - M : mistake
    - classified.csv

-----------


2) load DB.gcd into conquest



	 - there are some 'ring'/'catenane' structures in there also

- Visualized all CIFs and CCDC entries and flagged presence of: (in DB_sheet.ods)
	- solvent in CIF
	- disorder in cage backbone
	- notes on structures
	- Whether Squeeze/PLATON was used (based on the presence of that text in the CCDC entry, I did not check the original literature).

- Clean DB based on disorder/presence of solvent, all notes in DB_sheet.ods
	- CIFs with no solvent copied to ./no_solvent/
	- use test_shape.py to determine shape persistence:
		- modularize CIF and extract all independant cages
		- run pywindow
		- extract lowest energy conformer from an MD run using OPLS3
		- run pywindow on lowest energy conformer
		- comparison of pore diameter used to determine shape persistency


== Notes ==  
- CIFs with REFCODE (6 letter CSD code) as name have been extracted by Python CSD API based on CCDC code
- CIFs with CCDC code as name (numerical code) were extracted manually from online CSD because they were not in the latest version of the CSD at the time of collection. Not sure how these differ, but it would be worth checking if these can be updated.
- All python scripts are available in a git repo if required

-------------------------------------------------------
list of ALL CIFs (may differ from REFCODEs in CSD_search*.gcd)
-------------------------------------------------------
ABIKUU.cif
ABILAB.cif
ABILEF.cif
ABILIJ.cif
ABILOP.cif
ABILUV.cif
ABIMAC.cif
ABIMEG.cif
ABIMIK.cif
ABIMOQ.cif
ABIMUW.cif
ABINAD.cif
ABINEH.cif
ABINIL.cif
ABINUX.cif
ABIPAF.cif
ABIPEJ.cif
ABIQEK.cif
ABIQIO.cif
CAFJAX.cif
CAFJEB.cif
CANHOR.cif
CAXFIT.cif
CAXFOZ.cif
DEDTOY.cif
DEDTUE.cif
DEDVAM.cif
DEDVEQ.cif
DENMIV.cif
DENMUH.cif
DENNAO.cif
GICGUX.cif
IFAJOR.cif
IFAJUX.cif
IFAKAE.cif
IFAKEI.cif
IFAKIM.cif
IYEMAC.cif
IYEMEG.cif
IYEMIK.cif
KENRED.cif
MAGJUC.cif
PAWSEO.cif
PAWSIS.cif
PIFHIY.cif
PIFHUK.cif
PIFJAS.cif
PIFJEW.cif
PIFJIA.cif
PIFJOG.cif
PIFJUM.cif
PIFKAT.cif
PIFKEX.cif
PIFKIB.cif
PIFKOH.cif
PIFKUN.cif
PIFTOQ.cif
PIFTUW.cif
PIFVAE.cif
PIFVEI.cif
PIFVIM.cif
PIFVOS.cif
PIFVUY.cif
PIFWAF.cif
REGDUF.cif
REHCIT.cif
RELZEQ.cif
RELZIU.cif
RELZOA.cif
RELZUG.cif
REMBAP.cif
REMBET.cif
SAVYAS.cif
SENNOR.cif
SENNUX.cif
SENPAF.cif
SENPIN.cif
SENPOT.cif
SENPUZ.cif
SENPUZ_ordered.cif
SENQAG.cif
SENQEK.cif
SENQIO.cif
SENQOU.cif
SENQUA.cif
SENRAH.cif
SENREL.cif
TASPUB.cif
TASQAI.cif
TASQEM.cif
TASQIQ.cif
TASQOW02.cif
TASQOW.cif
XAMQEK.cif
XAMQIO.cif
XAMQOU.cif
XAMQUA.cif
XAYMOC.cif
XAYMUI.cif
YEZLOH.cif
YEZLUN.cif
YEZMAU.cif
YEZMIC.cif
YEZMOI.cif
YEZMUO.cif
YEZNAV.cif
YIGPOW.cif
YIGQEN.cif


